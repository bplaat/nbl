#dasf
fn double(number) {
    return number * 2;
}

const add = fn (a: int, b: int): int {
    return a + b;
};

println(add(double(4), 4));
// This is a comment
// println('Hello World!');

// let num = 24;
// println((string)num + 'x');

// const a = 0;
// const names = [ 'Bastiaan', [ 'Leonard', 'Jiska' ] ];
// println(names[1][a]);

// const person = {
//     numbers = [{a=10}, {a=20}, {a=30}]
// };
// println(person['numbers'][1]);
// println(person.numbers[1].a);

/*
let numbers = [1, 2, 3];
array_push(numbers, 10);
array_push(numbers, 12);
array_push(numbers, 14);

for (let i = 0; i < array_length(numbers); i = i + 1) {
    println("-", numbers[i]);
}

const person = {};
person.name = 'Bastiaan';
println(person, person.name);
*/

// let x = 2;

// fn hello() {
//     println('Hello!');
// }

// hello();
// hello();
// hello();
// println(type(hello));

/*
const x: int = 100;
fn add(a: int, b: int): int {
    return x + a + b;
}
println(add(10, 20));*/

// // #################################

// const double = fn (callback) {
//     println(callback() * 2);
// };
// double(fn () => 10);

// fn person_name() => 'Bastiaan';

// println(person_name());


// // #################################

// fn fibonacci(num) {
//         if(num==1)
//             return 0;
//         if (num == 2)
//             return 1;
//         return fibonacci(num - 1) + fibonacci(num - 2);
//     }

// println(fibonacci(23));

// let x;
// const y = x = 3;
// y = 6;
// x = 10;

// println(x, y);

// {
//     let q = 2;
//     println(q);
//     if (q == 1) exit();
// }

// if (x > 5)
//     println(x + 10);
// else
//     println('x < 5');


// for (let i = 0; i < 10; i = i + 1) {
//     if (i % 2 == 0)
//         println(i);
// }

// println('Bastiaan ' + type('Jan') + ' ' + type(34));

// println(string(int('123') + 7) + ' wo');

/*
adsf
dsa
fds
af
dsaf
dsa
*/
