include 'helpers.nbl';

assert(type(1) == 'int');
assert(type(1.1) == 'float');
assert(type('string') == 'string');
assert(type([]) == 'array');
assert(type({}) == 'object');
assert(type(fn () => true) == 'function');
assert(type(class {}) == 'class');

assert(---63 == -63);
assert(~-1 == 0);
assert(!!!false == true);
assert((string)10 == '10');
assert((int)10.99 == 10);
assert(type((bool)10) == 'bool');
assert(type((int)10.10) == 'int');
assert(type((float)10) == 'float');

assert(1 + 1 == 2);
assert(15 - 6 == 9);
assert(10 * 5 == 50);
assert(34 ** 4 == 1336336);
assert(10 / 2 == 5);
assert(10 / 0 == 0);
assert(312321 % 213 == 63);
assert(3214 & 8 == 8);
assert(7453 ^ 32 == 7485);
assert(331214 | 456 == 331214);
assert(2 << 14 == 32768);
assert(2314324 >> 8 == 9040);
assert('string' == 'string');
assert('string' != null);
assert(214324 > 3432);
assert(100 >= 100);
assert(6932 < 231244);
assert(560 <= 560);
assert(true && true);
assert(!(true && false));
assert(true || false);
assert(!(false || false));

assertFails(fn () => 5 + '6');
assertFails(fn () => 5 + true);
assertFails(fn () => 5 + []);
assertFails(fn () => 5 + {});
assertFails(fn () => [] + {});
assertFails(fn () => true + false);
assertFails(fn () => 'fdsa' + false);
assertFails(fn () => { x = 5}['hoi']);
assertFails(fn () => { x = 5}[true]);
assertFails(fn () => { x = 5}[[]]);
assertFails(fn () => { x = 5}[{}]);
